-- -----------------------------
-- -----------------------------
-- -----------------------------
-- -----------------------------
-- -----------------------------
-- -----------------------------
-- -----------------------------
-- -----------------------------
-- SYNC DATE
-- -----------------------------

botocore.exceptions.ClientError: An error occurred (AuthFailure) when calling the DescribeRegions operation: AWS was not able to validate the provided access credentials

Solucion:

ntpdate ntp.ubuntu.com

-- -----------------------------
-- Credentials
-- -----------------------------

1. Passing credentials as parameters in the boto.client() method

import boto3
client = boto3.client(
    's3',
    aws_access_key_id=ACCESS_KEY,
    aws_secret_access_key=SECRET_KEY,
    aws_session_token=SESSION_TOKEN,
)

2. Passing credentials as parameters when creating a Session object

# Or via the Session
session = boto3.Session(
    aws_access_key_id=ACCESS_KEY,
    aws_secret_access_key=SECRET_KEY,
    aws_session_token=SESSION_TOKEN,
)

-- DO NOT HARD CODING!!!:

    aws_access_key_id='AKIAIO5FODNN7EXAMPLE',
    aws_secret_access_key='ABCDEF+c2L7yXeGvUyrPgYsDnWRRC1AYEXAMPLE'

3. Environment variables

AWS_ACCESS_KEY_ID - The access key for your AWS account.
AWS_SECRET_ACCESS_KEY - The secret key for your AWS account.
AWS_SESSION_TOKEN - The session key for your AWS account. This is only needed when you are using temporary credentials. The AWS_SECURITY_TOKEN environment variable can also be used, but is only supported for backwards compatibility purposes. AWS_SESSION_TOKEN is supported by multiple AWS SDKs besides python.

3. Shared credential file (~/.aws/credentials - AWS_SHARED_CREDENTIALS_FILE )

[default]
aws_access_key_id=foo
aws_secret_access_key=bar

[dev]
aws_access_key_id=foo2
aws_secret_access_key=bar2

[prod]
aws_access_key_id=foo3
aws_secret_access_key=bar3

session = boto3.Session(profile_name='dev')
# Any clients created from this session will use credentials
# from the [dev] section of ~/.aws/credentials.
dev_s3_client = session.client('s3')


4. AWS config file (~/.aws/config - AWS_CONFIG_FILE)

[default]
aws_access_key_id=foo
aws_secret_access_key=bar

[profile dev]
aws_access_key_id=foo2
aws_secret_access_key=bar2

[profile prod]
aws_access_key_id=foo3
aws_secret_access_key=bar3


5. Assume Role provider

http://boto3.readthedocs.io/en/latest/guide/configuration.html

6. Boto2 config file (/etc/boto.cfg and ~/.boto - BOTO_CONFIG )

[Credentials]
aws_access_key_id = foo
aws_secret_access_key = bar

7. Instance metadata service on an Amazon EC2 instance that has an IAM role configured.

If you are running on Amazon EC2 and no credentials have been found by any of the providers above, boto3 will try to load credentials from the instance metadata service. In order to take advantage of this feature, you must have specified an IAM role to use when you launched your EC2 instance.


-- -----------------------------
-- CONFIG FILE
-- -----------------------------

[default]
region=eu-west-1
output=json

[profile dev]
region=us-west-1
output=json

[profile prod]
region=us-west-2
output=json


-- -----------------------------
-- -----------------------------
-- -----------------------------
-- -----------------------------
-- -----------------------------
-- -----------------------------
-- -----------------------------
-- -----------------------------
-- -----------------------------
-- -----------------------------
-- -----------------------------
-- -----------------------------
-- -----------------------------
-- -----------------------------
-- -----------------------------
-- -----------------------------
-- -----------------------------
