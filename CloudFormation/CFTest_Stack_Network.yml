---

AWSTemplateFormatVersion: "2010-09-09"
Description: "VPC. Test"

Parameters:
  CIDRvpc:
    Description: "IP range for the VPC"
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "IP CIDR range, format a.b.c.d/x"
  CIDRpub1:
    Description: "IP range for the Subnet pub1"
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "IP CIDR range, format a.b.c.d/x"
  CIDRpub2:
    Description: "IP range for the Subnet pub2"
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "IP CIDR range, format a.b.c.d/x"
  CIDRpriv1:
    Description: "IP range for the Subnet priv1"
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "IP CIDR range, format a.b.c.d/x"
  CIDRpriv2:
    Description: "IP range for the Subnet priv2"
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "IP CIDR range, format a.b.c.d/x"
    
Resources: 
  TestVPC:
   Type: "AWS::EC2::VPC"
   Properties:
    CidrBlock: !Ref  CIDRvpc
    EnableDnsSupport: true
    EnableDnsHostnames: true
    Tags:
     - Key: "Name"
       Value: "TestVPC"
  TestSubnetPub1:
   Type: "AWS::EC2::Subnet"
   Properties:
      AvailabilityZone: !FindInMap [ AvailabilityZone1, !Ref "AWS::Region", AZName ]
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref CIDRpub1
      VpcId: !Ref TestVPC
      Tags:
       - Key: "Name"
         Value: "TestSubnetPub1"
  TestSubnetPub2:
   Type: "AWS::EC2::Subnet"
   Properties:
      AvailabilityZone: !FindInMap [ AvailabilityZone2, !Ref "AWS::Region", AZName ]
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref CIDRpub2
      VpcId: !Ref TestVPC
      Tags:
       - Key: "Name"
         Value: "TestSubnetPub2"
  TestSubnetPriv1:
   Type: "AWS::EC2::Subnet"
   Properties:
      AvailabilityZone: !FindInMap [ AvailabilityZone1, !Ref "AWS::Region", AZName ]
      MapPublicIpOnLaunch: false
      CidrBlock: !Ref CIDRpriv1
      VpcId: !Ref TestVPC
      Tags:
       - Key: "Name"
         Value: "TestSubnetPriv1"
  TestSubnetPriv2:
   Type: "AWS::EC2::Subnet"
   Properties:
      AvailabilityZone: !FindInMap [ AvailabilityZone2, !Ref "AWS::Region", AZName ]
      MapPublicIpOnLaunch: false
      CidrBlock: !Ref CIDRpriv2
      VpcId: !Ref TestVPC
      Tags:
       - Key: "Name"
         Value: "TestSubnetPriv2"

Mappings:
 AvailabilityZone1:
  eu-west-1: 
   AZName: eu-west-1a
  us-east-1:
   AZName: us-east-1a
  us-west-1:
   AZName: us-west-1a
 AvailabilityZone2:
  eu-west-1: 
   AZName: eu-west-1b
  us-east-1:
   AZName: us-east-1b
  us-west-1:
   AZName: us-west-1b
 AvailabilityZone2:
  eu-west-1: 
   AZName: eu-west-1c
  us-east-1:
   AZName: us-east-1c
  us-west-1:
   AZName: us-west-1c

Outputs:
  VPCIdentifier:
    Value: !Ref TestVPC
    Export:
     Name: !Join [ ":", [ !Ref "AWS::StackName", VPCIdentifier ] ]
  SubnetPub1Identifier:
    Value: !Ref TestSubnetPub1
    Export:
     Name: !Join [ ":", [ !Ref "AWS::StackName", SubnetPub1Identifier ] ]
  SubnetPub2Identifier:
    Value: !Ref TestSubnetPub2
    Export:
     Name: !Join [ ":", [ !Ref "AWS::StackName", SubnetPub2Identifier ] ]
